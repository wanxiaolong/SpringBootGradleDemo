plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    //optional: 这个插件用来管理spring的依赖，这样在dependencies中声明springboot依赖的时候就不用写版本号了
    id 'io.spring.dependency-management' version '1.1.6'

    id 'jacoco'
    //id 'checkstyle'

    //检查代码风格的插件，和checkstyle相比它可以自动修复风格问题，推荐
    id "com.diffplug.spotless" version "6.25.0"
    //检查代码的缺陷，coding smell
    id "com.github.spotbugs" version "6.1.2"
    //检查依赖的包是不是有缺陷，vulnerabilities
    id "org.sonatype.gradle.plugins.scan" version "2.8.3"
}

group 'com.demo.gradle'
version '1.0-SNAPSHOT'

repositories {
    //mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/public' }
}

java {
    sourceCompatibility = JavaLanguageVersion.of(21)
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //定时任务quartz
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //这里使用postgresql作为DB
    runtimeOnly 'org.postgresql:postgresql'
    //quartz调度器会使用到的连接池
    implementation 'com.mchange:c3p0:0.10.1'

    //使用flyway来管理DB的变更版本
    implementation 'org.flywaydb:flyway-database-postgresql:11.1.0'

    //使用lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //JUnit Jupiter API，写UT会用到
    testImplementation 'org.junit.jupiter:junit-jupiter'
    //JUnit Jupiter Engine，运行UT会用到
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 这个section是gradle的插件io.spring.dependency-management提供的，需要搭配它一起使用
dependencyManagement {
    dependencies {
        dependency 'ch.qos.logback:logback-classic:1.5.16'
        dependency 'ch.qos.logback:logback-core:1.5.16'
    }
}

//配置checkstyle插件
//checkstyle {
//    //指定com.puppycrawl.tools:checkstyle的版本
//    toolVersion = '10.20.2'
//    //指定google check规则文件的路径
//    configFile = file('config/checkstyle/google_checks.xml')
//    configProperties = [
//            //warning: 不会阻塞构建，error：会阻塞构建
//            "org.checkstyle.google.severity": "warning"
//    ]
//}

//配置spotless插件
//详见：https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // for Java language, use GoogleJavaFormat
    java {
        importOrder()
        removeUnusedImports()
        // 'cleanthat' will refactor your code, but it may break your style,
        // so need to apply it before your formatter
        cleanthat()

        // the code formatter
        googleJavaFormat()

        // this will remove incorrect newlines if multiple annotation used.
        formatAnnotations()
    }
}


test {
    //显示测UT的标准输出和错误输出
    testLogging {
        showStandardStreams = true
    }
    //配置gradle使用junit平台
    useJUnitPlatform()
    //生成覆盖率报告。这里的finalizedBy表示在执行test这个任务后，紧接着执行这两个任务
    finalizedBy jacocoTestReport
    //检查代码覆盖率
    finalizedBy jacocoTestCoverageVerification
}

//定义一个task，用于生成覆盖率报告
jacocoTestReport {
    //这里的dependsOn表示在执行jacocoTestReport任务前要先执行test任务
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        xml.outputLocation=file("build/reports/jacoco.xml")
    }
}

//定义一个task，用于验证覆盖率
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE' //行覆盖率
                value = 'COVEREDRATIO'
                minimum = 0.00 //最低覆盖率为50%，如果低于50%则会构建失败
            }
        }
    }
}

//详见：https://github.com/spotbugs/spotbugs-gradle-plugin
spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    //指定spotbugs的输出报告的路径
    reportsDir = file("build/spotbugs")
    //指定要排除的类、包
    excludeFilter = file("spotbugs-exclude.xml")
}

//详见：https://github.com/sonatype-nexus-community/scan-gradle-plugin
ossIndexAudit {
    printBanner = false
    excludeVulnerabilityIds = [
        // "CVE-2024-00001",
        // "CVE=2025-00001"
    ]
}
