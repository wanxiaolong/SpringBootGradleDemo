plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    //optional: 这个插件用来管理spring的依赖，这样在dependencies中声明springboot依赖的时候就不用写版本号了
    //id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'checkstyle'
    id 'jacoco'
}

group 'com.demo.gradle'
version '1.0-SNAPSHOT'

repositories {
    //mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/public' }
}

java {
    sourceCompatibility = JavaLanguageVersion.of(21)
}

dependencies {
    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.2'
    //JUnit Jupiter API，写UT会用到
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    //JUnit Jupiter Engine，运行UT会用到
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//配置checkstyle插件
checkstyle {
    //指定com.puppycrawl.tools:checkstyle的版本
    toolVersion = '10.20.2'
    //指定google check规则文件的路径
    configFile = file('config/checkstyle/google_checks.xml')
    configProperties = [
            //warning: 不会阻塞构建，error：会阻塞构建
            "org.checkstyle.google.severity": "warning"
    ]
}

test {
    //显示测UT的标准输出和错误输出
    testLogging {
        showStandardStreams = true
    }
    //配置gradle使用junit平台
    useJUnitPlatform()
    //生成覆盖率报告。这里的finalizedBy表示在执行test这个任务后，紧接着执行这两个任务
    finalizedBy jacocoTestReport
    //检查代码覆盖率
    finalizedBy jacocoTestCoverageVerification
}

//定义一个task，用于生成覆盖率报告
jacocoTestReport {
    //这里的dependsOn表示在执行jacocoTestReport任务前要先执行test任务
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        xml.outputLocation=file("build/reports/jacoco.xml")
    }
}

//定义一个task，用于验证覆盖率
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE' //行覆盖率
                value = 'COVEREDRATIO'
                minimum = 0.00 //最低覆盖率为50%，如果低于50%则会构建失败
            }
        }
    }
}
